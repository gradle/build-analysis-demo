/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.gradle.buildeng.app

import com.beust.jcommander.JCommander
import com.beust.jcommander.ParameterException
import org.gradle.buildeng.data.collection.ExportClientSpec
import org.gradle.buildeng.data.collection.GradleEnterpriseBuildScanCollector
import org.gradle.buildeng.data.collection.ServerConnectionInfo
import java.net.InetSocketAddress
import java.time.Duration
import java.time.Instant

class App {
    fun runFeedbackLoopAnalysis(args: Array<String>) {
        val cliArgs: CliArgs = parseArgs(*args)
        val exportClientSpec = ExportClientSpec.from(cliArgs)

        val serverAddress = InetSocketAddress(exportClientSpec.serverUri, 443)
        val serverConnectionInfo = ServerConnectionInfo(serverAddress, exportClientSpec.username, exportClientSpec.password)

        val since = Instant.now().minus(Duration.ofDays(exportClientSpec.days.toLong()))

        GradleEnterpriseBuildScanCollector(serverConnectionInfo, since, exportClientSpec.outputFile.toFile()).writeBuilds()
    }

    private fun parseArgs(vararg args: String): CliArgs {
        val cliArgs = CliArgs()
        val jCommander = JCommander(cliArgs)
        try {
            jCommander.parse(*args)

            if (cliArgs.help) {
                jCommander.usage()
                System.exit(0)
            }
        } catch (e: ParameterException) {
            System.err.println(e.message)
            jCommander.usage()
            System.exit(1)
        }

        return cliArgs
    }
}

fun main(args: Array<String>) {
    // TODO: allow selective analysis using CLI args: run --tests --tasks --errors --feedback-loops
    App().runFeedbackLoopAnalysis(args)
}
